#!/usr/bin/python
# -*- coding: utf-8 -*-

import logging
from aiogram import types, Bot, Dispatcher, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import qrcode
import random
import os

token = "5754640726:AAGhih1pWh5iK8-sbKhGcy7nCcR2mniO39Q"

bot = Bot(token)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

markup = ReplyKeyboardMarkup(resize_keyboard=True)

button_author = KeyboardButton("üèÜ–û–± –ê–≤—Ç–æ—Ä–µüèÜ")
button_start = KeyboardButton("üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µüëã")
button_help = KeyboardButton("‚ÑπÔ∏è–ü–æ–º–æ—â—å‚ÑπÔ∏è")

markup.add(button_author)
markup.add(button_start)
markup.add(button_help)

@dp.message_handler(commands="start")
async def start(message: types.Message):
	await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR –∫–æ–¥–æ–≤!\n–î–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–∏—à–∏ /help, –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –≤ –º–µ–Ω—é!", reply_markup=markup)

@dp.message_handler(commands="make")
async def make(message: types.Message):
	filename_raw = str(random.random()) + ".jpg"
	data_raw = list(message.text)

	stopper = False

	data_raw.remove('/')
	data_raw.remove('m')
	data_raw.remove('a')
	data_raw.remove('k')
	data_raw.remove('e')

	try:
		del data_raw[0]
	except Exception as _e:
		e = str(_e)
		stopper = True

	data = "".join(data_raw)

	filename = list(filename_raw)
	del filename[1]
	filename = "".join(filename)

	if (data == " "):
		await message.answer('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–º–æ—â–∏!')
		await bot.send_message(message.chat.id, "***–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏***", reply_markup=markup)
	elif (stopper == True):
		await message.answer('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–º–æ—â–∏!')
		await bot.send_message(message.chat.id, "***–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏***", reply_markup=markup)
	else:
		img = qrcode.make(data)
		img.save(filename, 'JPEG')

		qr_image = open(filename, 'rb')

		await message.answer(f"–í–∞—à QR –∫–æ–¥ —Å –¥–∞–Ω–Ω—ã–º–∏\n\"{data}\"\n–∏ –∫–æ–¥–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n{filename}\n—É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
		await message.answer('–û—Ç–ø—Ä–∞–≤–∫–∞...')
		await bot.send_photo(message.chat.id, qr_image)

		await bot.send_message(message.chat.id, "***–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏***", reply_markup=markup)

		os.remove(filename)

@dp.message_handler(commands="help")
async def help(message: types.Message):
	await bot.send_message(message.chat.id, f"***–ü–æ–º–æ—â—å***\n\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /make\n\n***–ü—Ä–∏–º–µ—Ä—ã***\n/make Hello, World! - QR –∫–æ–¥ —Å –¥–∞–Ω–Ω—ã–º–∏ \"Hello, World!\"\n/make google.com - QR –∫–æ–¥ —Å –¥–∞–Ω–Ω—ã–º–∏ \"google.com\"", reply_markup=markup)

@dp.message_handler(commands="author")
async def author(message: types.Message):
	markup_url = InlineKeyboardMarkup()
	button_author_url = InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É", url="t.me/bithoffka")

	markup_url.add(button_author_url)

	await bot.send_message(message.chat.id, "–°–¥–µ–ª–∞–Ω–æ @bithoffka –Ω–∞ Python", reply_markup=markup_url)
	await bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º", reply_markup=markup)

@dp.message_handler()
async def handler(message: types.Message):
	text = message.text

	if text == "üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µüëã":
		await start(message)
	elif text == "üèÜ–û–± –ê–≤—Ç–æ—Ä–µüèÜ":
		await author(message)
	elif text == "‚ÑπÔ∏è–ü–æ–º–æ—â—å‚ÑπÔ∏è":
		await help(message)
	else:
		await message.answer("–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–º–æ—â–∏!")

if __name__ == '__main__':
	executor.start_polling(dp)